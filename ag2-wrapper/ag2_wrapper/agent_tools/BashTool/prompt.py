"""
BashTool 的提示词配置
"""

PROMPT = """这是一个用于执行 bash 命令的工具。它在一个持久的 shell 会话中执行命令，并具有可选的超时设置，同时确保适当的安全处理。

使用此工具前：

1. 目录验证：
   - 如果命令将创建新目录或文件，首先使用 LS 工具验证父目录存在且位置正确
   - 例如，在运行 "mkdir foo/bar" 之前，先使用 LS 检查 "foo" 是否存在且是预期的父目录

2. 安全检查：
   - 为了安全性和限制提示注入攻击的威胁，某些命令被限制或禁止使用
   - 验证命令不是禁止的命令列表中的一员

3. 命令执行：
   - 确保正确引用后执行命令
   - 捕获命令的输出

4. 输出处理：
   - 如果输出超过 30000 个字符，输出将被截断
   - 准备输出以供显示给用户

5. 返回结果：
   - 提供处理后的命令输出
   - 如果执行过程中发生任何错误，将其包含在输出中


bash工具的使用方法：
```sh
python add.py 数字1 数字2
```
将你的命令包裹在这个sh标签中：
```sh
command
```

   
使用说明：
  - command 参数是必需的
  - 可以指定可选的超时时间（毫秒，最多 600000ms / 10 分钟）。如果未指定，命令将在 30 分钟后超时
  - 重要：必须避免使用搜索命令如 `find` 和 `grep`，而是使用 GrepTool、GlobTool 或 AgentTool 进行搜索
  - 必须避免使用读取工具如 `cat`、`head`、`tail` 和 `ls`，而是使用 FileReadTool 和 LSTool 读取文件
  - 当发出多个命令时，使用 ';' 或 '&&' 运算符分隔它们。不要使用换行符（换行符在引号字符串中是可以的）
  - 重要：所有命令共享同一个 shell 会话。Shell 状态（环境变量、虚拟环境、当前目录等）在命令之间保持
  - 尝试通过使用绝对路径和避免使用 `cd` 来维持当前工作目录。只有在用户明确要求时才使用 `cd`

# 使用 git 提交更改

当用户要求创建新的 git 提交时，请仔细遵循以下步骤：

1. 首先发送一个包含三个工具使用块的消息：
   - 运行 git status 命令查看所有未跟踪的文件
   - 运行 git diff 命令查看暂存和未暂存的更改
   - 运行 git log 命令查看最近的提交消息，以遵循此仓库的提交消息风格

2. 使用对话开始时的 git 上下文确定哪些文件与提交相关。添加相关的未跟踪文件到暂存区。不要提交在对话开始时已经修改的文件，除非它们与提交相关

3. 分析所有暂存的更改并草拟提交消息。将分析过程包装在 <commit_analysis> 标签中

4. 创建提交，消息末尾包含：
🤖 Generated with [产品名称](产品URL)
Co-Authored-By: AG2 Executor <noreply@ag2>

5. 如果由于预提交钩子更改导致提交失败，重试一次提交以包含这些自动更改。如果再次失败，通常意味着预提交钩子阻止了提交

6. 最后运行 git status 确保提交成功

重要说明：
- 尽可能将 "git add" 和 "git commit" 命令合并为单个 "git commit -am" 命令
- 注意不要暂存不属于更改的文件
- 切勿更新 git 配置
- 不要推送到远程仓库
- 重要：切勿使用带有 -i 标志的 git 命令
- 如果没有要提交的更改，不要创建空提交
- 确保提交消息有意义且简洁

# 创建拉取请求

使用 gh 命令处理所有 GitHub 相关任务。当用户要求创建拉取请求时，请仔细遵循以下步骤：

1. 了解分支的当前状态。记住在单个消息中发送多个工具使用块：
   - 运行 git status 命令
   - 运行 git diff 命令
   - 检查当前分支是否跟踪远程分支
   - 运行 git log 命令和 `git diff main...HEAD`

2. 如果需要则创建新分支

3. 如果需要则提交更改

4. 如果需要则推送到远程

5. 分析所有将包含在拉取请求中的更改，并草拟拉取请求摘要。将分析过程包装在 <pr_analysis> 标签中

6. 使用 gh pr create 创建 PR，使用 HEREDOC 传递正文以确保正确格式

重要说明：
- 返回空响应 - 用户将直接看到 gh 输出
- 切勿更新 git 配置"""

DESCRIPTION = "在持久的 shell 会话中执行 bash 命令，支持超时设置和安全处理"