"""
BashTool 的提示词配置
"""

PROMPT = """
# Shell 命令执行指南

在生成需要在 shell 环境中执行的命令时，请遵循以下指南以确保安全和有效。
你生成的命令将通过 ```sh ... ``` 代码块执行。

**执行前检查:**

1.  **目录验证:**
    *   如果命令会创建新目录或文件 (例如 `mkdir`, `touch`, `cp`, `mv` 到新位置)，请先考虑使用 `ls` 命令（或其他可用工具）验证目标路径的父目录是否存在且正确。避免在不存在的路径下创建内容。

2.  **安全检查:**
    *   **禁止危险命令:** 绝对禁止生成包含直接删除文件或目录的命令，特别是 `rm`。如果需要移除文件，优先考虑使用 `mv` 将其移动到临时或回收目录。
    *   避免执行下载和运行未知脚本的命令，除非明确知道来源可靠。
    *   注意命令注入风险，尤其是在处理用户输入或动态生成命令时（尽管在这个上下文中主要是你生成命令）。

**命令构建与执行:**

1.  **代码块格式:** 所有 shell 命令都必须包含在标记为 `sh` 的 Markdown 代码块中。例如：
    ```sh
    echo "Hello from shell"
    git status
    ```

2.  **命令分隔:** 当需要在一个代码块中执行多个命令时，通常使用 `;` 或 `&&` (根据逻辑需要) 分隔它们。不要在代码块的顶层使用换行符来分隔命令（引号内的换行符是允许的）。
    ```sh
    cd /path/to/project && mvn clean install; echo "Build complete"
    ```

3.  **持久会话:** 所有 ```sh``` 代码块都在同一个持久的 shell 会话中执行。这意味着环境变量、当前工作目录 (CWD)、激活的虚拟环境等状态会在连续的代码块执行之间保持。

4.  **工作目录:**
    *   尽量通过使用绝对路径或相对于已知初始工作目录的相对路径来避免不必要的 `cd` 命令。
    *   只有在任务逻辑确实需要时才使用 `cd` 切换目录。
    *   请记住，会话是持久的，`cd` 的效果会持续到下一个 `sh` 代码块。

5.  **避免的命令 (使用替代工具):**
    *   **搜索:** 不要使用 `find` 或 `grep`。应使用环境中提供的 `GrepTool`, `GlobTool` 或 `AgentTool` 进行文件内容或路径搜索。
    *   **读取:** 不要使用 `cat`, `head`, `tail`。应使用 `ReadFileTool` 读取文件内容。
    *   **列目录:** 不要直接使用 `ls` (除非是为了验证路径存在性)。应使用 `LSTool` 获取目录列表。
    *   *(注意: 上述替代工具的可用性取决于 Agent 的配置)*

**输出处理:**

*   执行命令的标准输出 (stdout) 和标准错误 (stderr) 都会被捕获。
*   如果输出过长，可能会被截断。
*   你将收到包含 `exitcode`, `stdout`, `stderr` 的执行结果。

**Git 操作指南:**

*   **状态检查:** 在执行 `commit` 或 `push` 等操作前，建议先使用 `git status`, `git diff` (包括 `--staged`), `git log` 来检查当前状态、更改和历史，确保操作符合预期。
*   **提交:**
    *   检查 `git status` 确定需要添加的文件。
    *   使用 `git add <file>` 添加文件到暂存区。
    *   编写有意义的提交信息。
    *   使用 `git commit -m "Your message"` 创建提交。
    *   如果可能且合适，合并 `add` 和 `commit` 为 `git commit -am "Your message"`。
    *   遵循仓库已有的提交信息风格（可通过 `git log` 查看）。
    *   如果仓库有预提交钩子 (pre-commit hooks)，提交可能会失败并自动修改文件。如果发生这种情况，可以尝试再次 `git add .` 和 `git commit` 来包含钩子所做的更改。如果再次失败，请报告问题。
    *   不要创建空的提交。
*   **推送:**
    *   在推送前，确认当前分支和远程仓库状态 (`git remote -v`, `git status`)。
    *   如果远程分支不存在或未跟踪，可能需要使用 `git push -u origin <branch-name>`。
    *   通常推送到 `origin`。
*   **拉取请求 (PR):**
    *   如果需要创建 PR，通常涉及检查状态、提交更改、推送到远程，然后使用相应的平台工具或命令（如 `gh pr create`，如果 `gh` CLI 可用）。
    *   在创建 PR 前，分析清楚包含的更改。
*   **禁止操作:**
    *   **不要** 更新全局或本地的 git 配置 (`git config`)。
    *   **不要** 使用带有 `-i` (交互式) 标志的 git 命令。

**通用原则:**

*   清晰说明你将要执行的命令及其目的。
*   检查命令执行结果，如果出现错误 (非零退出码或 stderr 中有错误信息)，需要分析原因并尝试修复或调整后续步骤。
"""

DESCRIPTION = "在持久的 shell 会话中执行 bash 命令，支持超时设置和安全处理"